class Scholar
	types
	
	values
	
	instance variables
		private users: set of User := {};
		private papers: set of Paper := {};
		private people: set of ScholarUtils`String := {};
		private currentUser: [User] := nil;
		
		-- papers in this object have no parent
		inv forall p in set papers &
			p.getParent() = nil;
			
		-- user papers either have no parent or are children of this object's papers
		inv forall u in set users &
			forall p in set u.getPapers() &
				p.getParent() = nil or p.getParent() in set papers;
		
	operations
		-- returns the user associated with a email
		public pure getUserByEmail: ScholarUtils`String ==> [User]
		getUserByEmail(e) == (
			for all u in set users do
				if (u.getEmail() = e) then
					return u;
			return nil;
		);
		
		-- logs the user in the scholar
		public login: ScholarUtils`String * ScholarUtils`String ==> ()
		login(e, p) == (
			dcl u: [User] := getUserByEmail(e);
			if u <> nil and u.isValidPassword(p) then (
				currentUser := u;
			)
		)
		pre not isLoggedIn()
		post let u = getUserByEmail(e) in (
				(not isLoggedIn() and u = nil)
				or (not isLoggedIn() and not u.isValidPassword(p))
				or (currentUser = u and u.getEmail() = e and u.isValidPassword(p))
			);
			
		--logs the user out	
		public logout: () ==> ()
		logout() == (
			currentUser := nil;
		)
		pre isLoggedIn()
		post not isLoggedIn();
		
		--checks if the user is logged in
		public pure isLoggedIn: () ==> bool
		isLoggedIn() == (
			return currentUser <> nil;
		);
		
		--returns the user
		public pure getCurrentUser: () ==> [User]
		getCurrentUser() == (
			return currentUser;
		);
		
		--register a new user
		public register: ScholarUtils`String * ScholarUtils`String ==> ()
		register(e, p) == (
			users := users union {new User(e, p)};
		)
		pre getUserByEmail(e) = nil
		post getUserByEmail(e).isValidPassword(p);
		
		--returns papers with a certain author name
		public getPapersFromAuthorName: ScholarUtils`String ==> set of Paper
		getPapersFromAuthorName(name) == (
			dcl res : set of Paper := {};
			for all p in set papers do
				if(name in set p.getAuthors()) then
					res := res union {p};
			return res
		);
		
		--returns papers with a certain DOI 
		public getPapersFromDOI: ScholarUtils`String ==> set of Paper
		getPapersFromDOI(doi) == (
			dcl res : set of Paper := {};
			for all p in set papers do
				if(doi = p.getDOI()) then
					res := res union {p};
			return res
		);
		
		--returns papers with a certain title
		public getPapersFromTitle: ScholarUtils`String ==> set of Paper
		getPapersFromTitle(title) == (
			dcl res : set of Paper := {};
			for all p in set papers do
				if(title = p.getTitle()) then
					res := res union {p};
			return res
		);
		
		--add a new paper
		public addPaper: Paper ==> ()
		addPaper(paper) == (
			papers := papers union {paper};
		)
		pre paper not in set papers
		post paper in set papers;
		
		--returns the papers
		public getPapers: () ==> set of Paper
		getPapers() == (
			return papers;
		);
	
	functions
		
	traces
	
end Scholar