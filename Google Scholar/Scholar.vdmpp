class Scholar
	types
	
	values
	
	instance variables
		public users: set of User := {};
		public papers: set of Paper := {};
		public people: set of Person := {};
		public currentUser: [User] := nil;
		
	operations
		public getUserByEmail: Utils`String ==> [User]
		getUserByEmail(e) == (
			for all u in set users do
				if (u.getEmail() = e) then
					return u;
			return nil;
		);
		
		public login: Utils`String * Utils`String ==> [User]
		login(e, p) == (
			dcl u: [User] := getUserByEmail(e);
			if u = nil then
				return nil
			else if u.isValidPassword(p) then (
				currentUser := u;
				return u
			)
			else
				return nil;
		)

		pre not isLoggedIn()
		post (RESULT = nil and not isLoggedIn())
			or (RESULT.getEmail() = e and RESULT.isValidPassword(p) and currentUser = RESULT);
			
		public logout: () ==> ()
		logout() == (
			currentUser := nil;
		)
		pre isLoggedIn()
		post not isLoggedIn();
		
		public pure isLoggedIn: () ==> bool
		isLoggedIn() == (
			return currentUser <> nil;
		);
		
		public getPapersFromAuthorName: Utils`String ==> set of Paper
		getPapersFromAuthorName(name) == (
			dcl author : Person := Person`getPersonByName(people, name);
			return Paper`papersFromAuthor(papers, author);
		);
	
	functions
		
	traces
	
end Scholar