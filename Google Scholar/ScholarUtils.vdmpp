class ScholarUtils
	types
		public String = seq of char;
	operations
		public static pure GetHIndex: seq of nat ==> nat
		GetHIndex(vals) == (
			dcl s : map nat to nat := {|->};
			dcl vals_len : nat := len vals;
			dcl min : nat := 0;
			dcl temp : nat := 0;
			dcl sum : nat := 0;
			
			-- initialize s to zero
			for i = 1 to vals_len + 1 do
				s := s munion {i |-> 0};
				
			for i = 1 to vals_len do (
				min := Min(vals_len, vals(i));
				temp := s(min + 1);
				temp := temp + 1;
				s := s ++ { (min + 1) |-> temp };
			);
			
			if(vals_len > 0) then (
			  vals_len := card dom s;
			  for i = 1 to vals_len do (
			  	temp := vals_len - i + 1;
			  	sum := sum + s(temp);
			  	if( sum >= (temp - 1)) then
			  		return temp - 1;
			  );
			);
			
			return 0;
		);
		
		public static pure Min: nat * nat ==> nat
		Min(n1, n2) == (
			if (n1 < n2) then
				return n1;
			return n2;
		);
		
end ScholarUtils