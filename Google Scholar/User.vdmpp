class User
	types
	
	values
	
	instance variables
		public email: ScholarUtils`String := [];
		public password: ScholarUtils`String := [];
		public papers: set of Paper := {};
		
	operations	
	
		--constructor
		public User: ScholarUtils`String * ScholarUtils`String  ==> User
		User(e, p) == (
			email := e;
			password := p;
			return self;
		);
		
		--returns the user email
		public pure getEmail: () ==> ScholarUtils`String
		getEmail() ==
			return email;

		--changes user email
		public changeEmail: ScholarUtils`String ==> ()
		changeEmail(newEmail) == (
			email := newEmail;
		)post email = newEmail;
			
		--checks if the password is a valid one	
		public pure isValidPassword: ScholarUtils`String ==> bool
		isValidPassword(p) == (
			return isMatchingPassword(p, password);
		);
		
		--change user password
		public changePassword: ScholarUtils`String ==> ()
		changePassword(newPassword) == (
			password := newPassword;
		)post password = newPassword;
		
		--add a new paper
		public addPaper: Paper ==> ()
		addPaper(paper) == (
			papers := papers union {paper};
		)
		pre paper not in set papers
		post paper in set papers;
		
		--remove paper
		public removePaper: Paper ==> ()
		removePaper(paper) == (
			papers := papers \ {paper};
		)
		pre paper in set papers
		post papers = papers~ \ {paper}; 
		
		--get papers
		public pure getPapers: () ==> set of Paper
		getPapers() ==
			return papers;
		
		--calculate and get H index of user	
		public pure getHIndex: set of Paper ==> nat
		getHIndex(allPapers) == (
			dcl scores : seq of nat := [];
			
			for all p in set papers do (
				scores := scores ^ [p.getNumCitedBy(allPapers)];
			);
			scores := Sort`sort(scores);
			
			return ScholarUtils`GetHIndex(scores);
		);
			
			--calculate and return I10 index
		public pure getI10Index: set of Paper ==> nat
		getI10Index(allPapers) == (
			dcl result : nat := 0;
			
			for all p in set papers do (
				if (p.getNumCitedBy(allPapers) >= 10) then (
					result := result + 1;
				)
			);
			
			return result;
		);
	
	functions
		--checks if the passwords match
		static public isMatchingPassword: ScholarUtils`String * ScholarUtils`String -> bool
		isMatchingPassword(p1, p2) == (
			p1 = p2
		);
	
	traces
	
end User