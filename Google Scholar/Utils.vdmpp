class Utils
	types
		public String = seq of char;
	values
	-- TODO Define values here
	instance variables
	-- TODO Define instance variables here
	operations
	
		public static GetHIndex: seq of nat ==> nat
		GetHIndex(vals) == (
			dcl s : map nat to nat := {|->};
			dcl vals_len : nat := len vals;
			dcl min : nat := 0;
			dcl temp : nat := 0;
			dcl sum : nat := 0;
			
			-- initialize s to zero
			for i = 1 to vals_len + 1 do
				s := s munion {i |-> 0};
				
			for i = 1 to vals_len do (
				min := Min(vals_len, vals(i));
				temp := s(min + 1);
				temp := temp + 1;
				s := s ++ { (min + 1) |-> temp };
			);
			
			vals_len := card dom s;
			for i = 1 to vals_len do (
				temp := vals_len - i + 1;
				sum := sum + s(temp);
				if( sum >= (temp - 1)) then
					return temp - 1;
			);
			
			return 0;
		);
		
		public static Min: nat * nat ==> nat
		Min(n1, n2) == (
			if (n1 < n2) then
				return n1;
			return n2;
		);
		
	functions
	
	-- from MFES slides
	public Mergesort: seq of nat -> seq of nat
	Mergesort(s) == (
		cases s:
			[] -> [],
			[x] -> [x],
			s1 ^ s2 -> Merge(Mergesort(s1), Mergesort(s2))
		end
	);
	
	-- from MFES slides
	Merge(s1, s2: seq of nat) res : seq of nat == (
	cases true:
		(s1 = []) -> s2,
		(s2 = []) -> s1,
		(hd s1 < hd s2) -> [hd s1] ^ Merge(tl s1, s2),
		others -> [hd s2] ^ Merge(s1, tl s2)
		end
	);

	traces
	-- TODO Define Combinatorial Test Traces here
end Utils