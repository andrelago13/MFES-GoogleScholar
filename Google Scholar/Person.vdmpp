class Person
	types
	-- TODO Define types here
	values
	-- TODO Define values here
	instance variables
		name: Utils`String := [];
		
	operations
		public Person: Utils`String ==> Person
		Person(n) == (
			name := n;
			return self;
		);
	
		public getName: () ==> Utils`String
		getName() == (
			return name
		)
		post name = name~;
		
		public static getPersonByName: set of Person * Utils`String ==> [Person]
		getPersonByName(people, person_name) == (
			for all p in set people do
				if (p.getName() = person_name) then
					return p;
			return nil;
		);
		
		public getHIndex: set of Paper ==> nat
		getHIndex(papers) == (
			dcl own_papers : set of Paper := Paper`papersFromAuthor(papers, self);
			dcl scores : seq of nat := [];
			
			for all p in set own_papers do (
				scores := scores ^ [p.getNumCitedBy(papers)];
			);
			scores := Utils`Mergesort(scores);
			
			return Utils`GetHIndex(scores);
		);
		
	functions
	-- TODO Define functiones here
	traces
	-- TODO Define Combinatorial Test Traces here
end Person