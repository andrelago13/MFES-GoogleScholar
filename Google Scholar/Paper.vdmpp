class Paper
	types
	-- TODO Define types here
	values
	-- TODO Define values here
	instance variables
		public abstract: Utils`String := []; 
		public publicationDate: nat;
		public DOI: Utils`String := [];
		public title: Utils`String := [];
		authors: set of Utils`String := {};
		cites: set of Paper := {}; --nao mudar
		relatedTo: set of Paper := {}; --nao mudar
		
		inv card authors > 0; -- pelo menos um autor
		
	operations
		public Paper: Utils`String * nat * Utils`String * Utils`String * Utils`String ==> Paper
		Paper(ab, pubDate, t, doi, author) == (
			abstract := ab;
			publicationDate := pubDate;
			title := t;
			DOI := doi;
			authors := {author};
			return self
		);
		
		
		public changeAbstract: Utils`String ==> ()
		changeAbstract(newAbstract) == (
			abstract := newAbstract;
		)post abstract~ <> abstract;
		
		public changePublicationDate: nat ==> ()
		changePublicationDate(newPublicationDate) == (
			publicationDate := newPublicationDate;
		)post publicationDate~ <> publicationDate;
		
		public changeTitle: Utils`String ==> ()
		changeTitle(newTitle) == (
			title := newTitle;
		)post title~ <> title;
		
		public changeDOI: Utils`String ==> ()
		changeDOI(newDOI) == (
			DOI := newDOI;
		)post DOI~ <> DOI;
		
		public changeAuthors: set of Utils`String ==> ()
		changeAuthors(newAuthors) == (
			authors := newAuthors;
		)post authors~ <> authors;
			
		public Paper: Utils`String * nat * Utils`String * Utils`String * set of Utils`String ==> Paper
		Paper(ab, pubDate, t, doi, authrs) == (
			abstract := ab;
			publicationDate := pubDate;
			title := t;
			DOI := doi;
			authors := authrs;
			return self
		);
			
		public pure getAuthors: () ==> set of Utils`String
		getAuthors() == (
			return authors;
		)
		post authors = authors~;
		
		public pure getTitle: () ==> Utils`String
		getTitle() == (
			return title;
		)
		post title = title~;
			
		public pure getCitations: () ==> set of Paper
		getCitations() == (
			return cites;
		)
		post cites = cites~;
			
		public pure getRelatedPapers: () ==> set of Paper
		getRelatedPapers() == (
			return relatedTo;
		)
		post relatedTo = relatedTo~;
			
		public addCitation(p: Paper) == if self <> p then cites := cites union {p}
		post cites = cites~ union {p} or cites = cites~;
			
		public addRelatedPaper(p: Paper) == if self <> p then relatedTo := relatedTo union {p}
		post relatedTo = relatedTo~ union {p} or relatedTo = relatedTo~;
		
		-- number of papers from "papers" that cite this paper
		public getNumCitedBy: set of Paper ==> nat
		getNumCitedBy(papers) == (
			dcl res :  nat := 0;
			for all p in set papers do
				if(self in set p.getCitations()) then
					res := res + 1;
			return res;
		);
		
		static public papersFromAuthor: set of Paper * Utils`String ==> set of Paper
		papersFromAuthor(papers, author) == (
			dcl res : set of Paper := {};
			for all p in set papers do
				if(author in set p.getAuthors()) then
					res := res union {p};
			return res
		)
		post forall p in set RESULT & author in set p.authors;
		
	functions
	-- TODO Define functiones here
	traces
	-- TODO Define Combinatorial Test Traces here
end Paper