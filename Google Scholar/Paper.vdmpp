class Paper
	types
	-- TODO Define types here
	values
	-- TODO Define values here
	instance variables
		public abstract: ScholarUtils`String := [];
		public publicationDate: nat;
		public DOI: ScholarUtils`String := [];
		authors: set of ScholarUtils`String := {};
		cites: set of Paper := {};
		relatedTo: set of Paper := {};
		
		inv card authors > 0; -- pelo menos um autor
		
	operations
		public Paper: ScholarUtils`String * nat * ScholarUtils`String * ScholarUtils`String ==> Paper
		Paper(ab, pubDate, doi, author) == (
			abstract := ab;
			publicationDate := pubDate;
			DOI := doi;
			authors := {author};
			return self
		);
			
		public Paper: ScholarUtils`String * nat * ScholarUtils`String * set of ScholarUtils`String ==> Paper
		Paper(ab, pubDate, doi, authrs) == (
			abstract := ab;
			publicationDate := pubDate;
			DOI := doi;
			authors := authrs;
			return self
		);
			
		public pure getAuthors: () ==> set of ScholarUtils`String
		getAuthors() == (
			return authors;
		);
			
		public pure getCitations: () ==> set of Paper
		getCitations() == (
			return cites;
		);
			
		public pure getRelatedPapers: () ==> set of Paper
		getRelatedPapers() == (
			return relatedTo;
		);
			
		public addCitation(p: Paper) == if self <> p then cites := cites union {p}
		post cites = cites~ union {p} or cites = cites~;
			
		public addRelatedPaper(p: Paper) == if self <> p then relatedTo := relatedTo union {p}
		post relatedTo = relatedTo~ union {p} or relatedTo = relatedTo~;
		
		-- number of papers from "papers" that cite this paper
		public pure getNumCitedBy: set of Paper ==> nat
		getNumCitedBy(papers) == (
			dcl res :  nat := 0;
			for all p in set papers do
				if(self in set p.getCitations()) then
					res := res + 1;
			return res;
		);
		
		static public papersFromAuthor: set of Paper * ScholarUtils`String ==> set of Paper
		papersFromAuthor(papers, author) == (
			dcl res : set of Paper := {};
			for all p in set papers do
				if(author in set p.getAuthors()) then
					res := res union {p};
			return res
		)
		post forall p in set RESULT & author in set p.authors;
		
	functions
	-- TODO Define functiones here
	traces
	-- TODO Define Combinatorial Test Traces here
end Paper