class TestPaper is subclass of MyTestCase
	types
	-- TODO Define types here
	values
	-- TODO Define values here
	instance variables
	-- TODO Define instance variables here
	operations		
		/** TEST CASES WITH VALID INPUTS **/
		
		-- Entry point that runs all tests with valid inputs
		public testAll: () ==> ()
		testAll() == (
			IO`println("Starting 'Paper' tests.");
			IO`println("	testChanges() starting.");
			testChanges();
			IO`println("	testChanges() ended.");
			IO`println("	testGetNumCitedBy() starting.");
			testGetNumCitedBy();
			IO`println("	testGetNumCitedBy() ended.");
			IO`println("	testPapersFromAuthor() starting.");
			testPapersFromAuthor();
			IO`println("	testPapersFromAuthor() ended.");
			IO`println("	testClone() starting.");
			testClone();
			IO`println("	testClone() ended.");
			IO`println("	testRemovals() starting.");
			testRemovals();
			IO`println("	testRemovals() ended.");
			IO`println("	testParent() starting.");
			testParent();
			IO`println("	testParent() ended.");
			
			-- Failing tests (due to invalid input)
			--testUserPaperWithParentUserPaper();
			
			IO`println("'Paper' tests done.");
		);
		
		public testChanges: () ==> ()
		testChanges() == (
			dcl paper: Paper := new Paper("abstract", 1995, "title", "doi", "author", nil);
			dcl relatedPaper: Paper := new Paper("ab", 2013, "t", "doi", "a", nil);
			
			paper.changeAbstract("new abstract");
			paper.changePublicationDate(2017);
			paper.changeTitle("new title");
			paper.changeDOI("new DOI");
			paper.changeAuthors({"new author 1", "new author 2"});
			assertEqual("new abstract", paper.getAbstract());
			assertEqual(2017, paper.getPublicationDate());
			assertEqual("new title", paper.getTitle());
			assertEqual("new DOI", paper.getDOI());
			assertTrue("new author 1" in set paper.getAuthors());
			assertTrue("new author 2" in set paper.getAuthors());
			assertEqual(2, card paper.getAuthors());
			assertEqual({}, paper.getRelatedPapers());
			
			paper.addRelatedPaper(relatedPaper);
			assertEqual({relatedPaper}, paper.getRelatedPapers());
		);
		
		public testGetNumCitedBy: () ==> ()
		testGetNumCitedBy() == (
			dcl paper: Paper := new Paper("", 0, "", "", "", nil);
			
			dcl p1: Paper := new Paper("", 0, "", "", "", nil);
			dcl p2: Paper := new Paper("", 0, "", "", "", nil);
			dcl p3: Paper := new Paper("", 0, "", "", "", nil);
			dcl p4: Paper := new Paper("", 0, "", "", "", nil);
			dcl p5: Paper := new Paper("", 0, "", "", "", nil);
			dcl p6: Paper := new Paper("", 0, "", "", "", nil);
			dcl p7: Paper := new Paper("", 0, "", "", "", nil);
			dcl p8: Paper := new Paper("", 0, "", "", "", nil);
			dcl p9: Paper := new Paper("", 0, "", "", "", nil);
			dcl p10: Paper := new Paper("", 0, "", "", "", nil);
			dcl p11: Paper := new Paper("", 0, "", "", "", nil);
			dcl p12: Paper := new Paper("", 0, "", "", "", nil);
			dcl papers: set of Paper := {
				paper,
				p1,
				p2,
				p3,
				p4,
				p5,
				p6,
				p7,
				p8,
				p9,
				p10,
				p11,
				p12
			};
			p2.addCitation(paper);
			p5.addCitation(paper);
			p8.addCitation(paper);
			p10.addCitation(paper);
			p11.addCitation(paper);
			assertEqual(5, paper.getNumCitedBy(papers));
		);
		
		public testPapersFromAuthor: () ==> ()
		testPapersFromAuthor() == (
			dcl author: ScholarUtils`String := "PASCOAL";
			
			dcl p1: Paper := new Paper("", 0,"", "", author, nil);
			dcl p2: Paper := new Paper("", 0,"", "", "", nil);
			dcl p3: Paper := new Paper("", 0,"", "", "", nil);
			dcl p4: Paper := new Paper("", 0,"", "", author, nil);
			dcl p5: Paper := new Paper("", 0,"", "", "", nil);
			dcl p6: Paper := new Paper("", 0,"", "", "", nil);
			dcl p7: Paper := new Paper("", 0,"", "", "", nil);
			dcl p8: Paper := new Paper("", 0,"", "", author, nil);
			dcl p9: Paper := new Paper("", 0,"", "", "", nil);
			dcl p10: Paper := new Paper("", 0,"", "", "", nil);
			dcl p11: Paper := new Paper("", 0,"", "", author, nil);
			dcl p12: Paper := new Paper("", 0,"", "", "", nil);
			dcl papers: set of Paper := {
				p1,
				p2,
				p3,
				p4,
				p5,
				p6,
				p7,
				p8,
				p9,
				p10,
				p11,
				p12
			};
			assertEqual({p1, p4, p8, p11}, Paper`papersFromAuthor(papers, author));
		);
		
		public testClone: () ==> ()
		testClone() == (
			dcl p: Paper := new Paper("abstract", 1995, "title", "doi", "author", nil);
			dcl pc1: Paper := p.clone(false);
			dcl pc2: Paper := p.clone(true);

			assertEqual(p.getAbstract(), pc1.getAbstract());
			assertEqual(p.getPublicationDate(), pc1.getPublicationDate());
			assertEqual(p.getTitle(), pc1.getTitle());
			assertEqual(p.getDOI(), pc1.getDOI());
			assertEqual(p.getAuthors(), pc1.getAuthors());
			assertEqual(nil, pc1.getParent());
			
			assertEqual(p.getAbstract(), pc2.getAbstract());
			assertEqual(p.getPublicationDate(), pc2.getPublicationDate());
			assertEqual(p.getTitle(), pc2.getTitle());
			assertEqual(p.getDOI(), pc2.getDOI());
			assertEqual(p.getAuthors(), pc2.getAuthors());
			assertEqual(p, pc2.getParent());
		);
		
		public testRemovals: () ==> ()
		testRemovals() == (
			dcl p: Paper := new Paper("abstract", 1995, "title", "doi", "author", nil);
			dcl p1: Paper := new Paper("", 1, "", "", "", nil);
			dcl p2: Paper := new Paper("", 1, "", "", "", nil);
			dcl p3: Paper := new Paper("", 1, "", "", "", nil);
			dcl p4: Paper := new Paper("", 1, "", "", "", nil);
			dcl p5: Paper := new Paper("", 1, "", "", "", nil);
			dcl p6: Paper := new Paper("", 1, "", "", "", nil);
			p.addRelatedPaper(p1);
			p.addRelatedPaper(p2);
			p.addRelatedPaper(p3);
			p.addRelatedPaper(p4);
			p.addRelatedPaper(p5);
			p.addCitation(p2);
			p.addCitation(p3);
			p.addCitation(p4);
			p.addCitation(p5);
			p.addCitation(p6);
			p.addAuthor("author1");
			
			assertEqual({"author", "author1"}, p.getAuthors());
			assertEqual({p1, p2, p3, p4, p5}, p.getRelatedPapers());
			assertEqual({p2, p3, p4, p5, p6}, p.getCitations());
			
			p.removeRelatedPaper(p4);
			p.removeCitation(p6);
			p.removeAuthor("author");
			
			assertEqual({p1, p2, p3, p5}, p.getRelatedPapers());
			assertEqual({p2, p3, p4, p5}, p.getCitations());
			
			assertEqual({"author1"}, p.getAuthors());
		);
		
		public testParent: () ==> ()
		testParent() == (
			dcl p: Paper := new Paper("abstract", 1995, "title", "doi", "author", nil);
			dcl p1: Paper := new Paper("abstract", 1995, "title", "doi", "author", p);
			dcl p2: Paper := new Paper("abstract", 1995, "title", "doi", {"author", "author2"}, p);
			dcl pCitation: Paper := new Paper("ab", 1994, "t", "d", "a", nil);
			
			assertEqual(p1.getParent(), p);
			assertEqual(p2.getParent(), p);
			
			p.addCitation(pCitation);
			assertEqual({pCitation}, p1.getCitations());
			assertEqual({pCitation}, p2.getCitations());
			
			p.addRelatedPaper(pCitation);
			assertEqual({pCitation}, p1.getRelatedPapers());
		);
		
		/***** TEST CASES WITH INVALID INPUTS (EXECUTE ONE AT A TIME) ******/
		public testUserPaperWithParentUserPaper: () ==> ()
		testUserPaperWithParentUserPaper() == (
			dcl p: Paper := new Paper("abstract", 1995, "title", "doi", "author", nil);
			dcl p1: Paper := new Paper("abstract", 1995, "title", "doi", "author", p);
			dcl p2: Paper := new Paper("abstract", 1995, "title", "doi", {"author", "author2"}, p1);
			
			assertEqual(p2.getParent(), p1)
		);
		
	functions
		
	traces
	-- TODO Define Combinatorial Test Traces here
end TestPaper