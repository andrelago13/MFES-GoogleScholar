class TestUtils is subclass of MyTestCase
	types
	-- TODO Define types here
	values
	-- TODO Define values here
	instance variables
	-- TODO Define instance variables here
	operations
		public generalScn: () ==> Scholar
			generalScn() == (
				dcl scholar: Scholar := new Scholar();
				return scholar;
			);
		
		/** TEST CASES WITH VALID INPUTS **/
		
		-- Entry point that runs all tests with valid inputs
		public testAll: () ==> ()
		testAll() == (
			IO`println("Starting 'Utils' tests.");
			IO`println("	testHIndex() starting.");
			testHIndex();
			IO`println("	testHIndex() ended.");
			IO`println("	testMin() starting.");
			testMin();
			IO`println("	testMin() ended.");
			IO`println("	testMerge() starting.");
			testMerge();
			IO`println("	testMerge() ended.");
			IO`println("	testMergesort() starting.");
			testMergesort();
			IO`println("	testMergesort() ended.");
			IO`println("'Utils' tests done.");
		);
		
		public testHIndex: () ==> ()
		testHIndex() == (
			dcl a1: seq of nat := [10,8,5,4,3];
			dcl a2: seq of nat := [25,8,5,3,3];
			assertEqual(4, Utils`GetHIndex(a1));
			assertEqual(3, Utils`GetHIndex(a2));
		);
		
		public testMin: () ==> ()
		testMin() == (
			assertEqual(4, Utils`Min(4, 50));
			assertEqual(3, Utils`Min(50, 3));
		);
		
		public testMerge: () ==> ()
		testMerge() == (
			dcl t1: seq of nat := [1,3,5];
			dcl t2: seq of nat := [2,4,6];
			dcl result: seq of nat := [1,2,3,4,5,6];
			assertEqual(result, Utils`Merge(t1, t2));
			assertEqual(result, Utils`Merge(t2, t1));
		);
		
		public testMergesort: () ==> ()
		testMergesort() == (
			assertEqual([1,2,3,4,5,6,7,8], Utils`Mergesort([5,1,3,8,2,7,4,6]));
			assertEqual([1,2,3,4,5,6,7,8], Utils`Mergesort([8,2,5,1,4,3,6,7]));
		);
		
	functions
		
	traces
	-- TODO Define Combinatorial Test Traces here
end TestUtils