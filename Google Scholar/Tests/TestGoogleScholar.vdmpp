class TestGoogleScholar is subclass of MyTestCase
	types
	-- TODO Define types here
	values
	-- TODO Define values here
	instance variables
	-- TODO Define instance variables here
	operations
		public generalScn: () ==> Scholar
		generalScn() == (
			dcl scholar: Scholar := new Scholar();
			scholar.register("user1@gmail.com", "pass1");
			scholar.register("user2@gmail.com", "pass2");
			scholar.register("user3@gmail.com", "pass3");
			return scholar;
		);
			
		public loggedInScn: () ==> Scholar
		loggedInScn() == (
			let s = generalScn() in (
				s.login("user1@gmail.com", "pass1");
				return s;
			);
		);
		
		/** TEST CASES WITH VALID INPUTS **/
		
		-- Entry point that runs all tests with valid inputs
		public testAll: () ==> ()
		testAll() == (
			IO`println("Starting 'Scholar' tests.");
			IO`println("	testRegister() starting.");
			testRegister();
			IO`println("	testRegister() ended.");
			IO`println("	testLoginLogout() starting.");
			testLoginLogout();
			IO`println("	testLoginLogout() ended.");
			IO`println("'Scholar' tests done.");
		);
		
		public testRegister: () ==> ()
		testRegister() == (
			let s = generalScn() in (
				dcl e: Utils`String := "new@gmail.com";
				dcl p: Utils`String := "newpass";
				assertEqual(s.getUserByEmail(e), nil);
				s.register(e, p);
				assertTrue(s.getUserByEmail(e) <> nil and s.getUserByEmail(e).isValidPassword(p));
			);
		);
		
		public testLoginLogout: () ==> ()
		testLoginLogout() == (
			let s = generalScn() in (
				s.login("inexistentuser@gmail.com", "pass1");
				assertTrue(not s.isLoggedIn());
				
				s.login("user1@gmail.com", "pass1");
				assertTrue(s.isLoggedIn());
				
				s.logout();
				assertTrue(not s.isLoggedIn());
			)
		);
		
		public testAddPaper: () ==> ()
		testAddPaper() == (
			let s = loggedInScn() in (
				dcl u: User := s.getCurrentUser();
				dcl p: Paper := new Paper(
					"A novel approach using Alloy in domain-specific language engineering",
					new Date(2015, 0, 0),
					"10.5220/0005228101570164",
					{new Person("Moreira"), new Person("RMLM"), new Person("Paiva"), new Person("ACR")});
				s.addPaper(p);
				assertTrue(p in set s.getPapersFromAuthorName("Moreira"));
				assertTrue(p in set s.getPapersFromAuthorName("RMLM"));
				assertTrue(p in set s.getPapersFromAuthorName("Paiva"));
				assertTrue(p in set s.getPapersFromAuthorName("ACR"));
				assertTrue(p in set u.getPapers());
			);
		);
				
		
	functions
		
	traces
	-- TODO Define Combinatorial Test Traces here
end TestGoogleScholar