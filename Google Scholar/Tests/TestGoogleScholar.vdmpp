class TestGoogleScholar is subclass of MyTestCase
	operations		
		/** TEST CASES WITH VALID INPUTS **/
		
		-- Entry point that runs all tests with valid inputs
		public testAll: () ==> ()
		testAll() == (
			IO`println("Starting 'Scholar' tests.");
			IO`println("	testRegister() starting.");
			testRegister();
			IO`println("	testRegister() ended.");
			IO`println("	testLoginLogout() starting.");
			testLoginLogout();
			IO`println("	testLoginLogout() ended.");
			IO`println("'Scholar' tests done.");
			IO`println("	testAddPaper() starting.");
			testAddPaper();
			IO`println("	testAddPaper() ended");
			IO`println("	testInvariant() starting.");
			testInvariant();
			IO`println("	testInvariant() ended");
			IO`println("'Scholar' tests done.");
		);
		
		public testRegister: () ==> ()
		testRegister() == (
			let s = TestUtils`generalScn() in (
				dcl e: ScholarUtils`String := "new@gmail.com";
				dcl p: ScholarUtils`String := "newpass";
				assertEqual(s.getUserByEmail(e), nil);
				s.register(e, p);
				assertTrue(s.getUserByEmail(e) <> nil and s.getUserByEmail(e).isValidPassword(p));
			);
		);
		
		public testLoginLogout: () ==> ()
		testLoginLogout() == (
			let s = TestUtils`generalScn() in (
				s.login("inexistentuser@gmail.com", "pass1");
				assertTrue(not s.isLoggedIn());
				
				s.login("user1@gmail.com", "wrongpass");
				assertTrue(not s.isLoggedIn());
				
				s.login("user1@gmail.com", "pass1");
				assertTrue(s.isLoggedIn());
				
				s.logout();
				assertTrue(not s.isLoggedIn());
			)
		);
		
		public testAddPaper: () ==> ()
		testAddPaper() == (
			let s = TestUtils`loggedInScn() in (
				dcl u: User := s.getCurrentUser();
				dcl p: Paper := new Paper(
					"A novel approach using Alloy in domain-specific language engineering",
					2015,
					"Alloy in domain-specific language engineering",
					"10.5220/0005228101570164",
					{"Moreira", "RMLM", "Paiva", "ACR"},
					nil);
				s.addPaper(p);
				assertTrue(p in set s.getPapersFromAuthorName("Moreira"));
				assertTrue(p in set s.getPapersFromAuthorName("RMLM"));
				assertTrue(p in set s.getPapersFromAuthorName("Paiva"));
				assertTrue(p in set s.getPapersFromAuthorName("ACR"));
				assertTrue(p in set s.getPapers());
				
				-- The logged in user doesn't have the paper
				assertTrue(not exists up in set u.getPapers() & up.getAbstract() = "A novel approach using Alloy in domain-specific language engineering");
				
				assertTrue(p in set s.getPapersFromTitle("Alloy in domain-specific language engineering"));
				
				assertTrue(p in set s.getPapersFromDOI("10.5220/0005228101570164"));
			);
		);
		
		public testInvariant: () ==> ()
		testInvariant() == (
			let s = TestUtils`loggedInScn() in (
				dcl u: User := s.getCurrentUser();
				dcl p: Paper := new Paper(
					"A novel approach using Alloy in domain-specific language engineering",
					2015,
					"Alloy in domain-specific language engineering",
					"10.5220/0005228101570164",
					{"Moreira", "RMLM", "Paiva", "ACR"},
					nil);
				dcl p2: Paper := p.clone(true);
				s.addPaper(p);
				u.addPaper(p2);
				assertEqual({p}, s.getPapers());
			);
		);
		
end TestGoogleScholar